service: ServerlessAPP

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  environment:
    EVENTS_TABLE_NAME: ${self:custom.EventsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    EVENTS_BUCKET_NAME: ${self:custom.EventsBucket.name}
  iamRoleStatements:
    - ${file(iam/EventsTableIAM.yml):EventsTableIAM}
    - ${file(iam/MailQueueIAM.yml):MailQueueIAM}
    - ${file(iam/EventsBucketIAM.yml):EventsBucketIAM}
  apiGateway:
    shouldStartNameWithService: true
  lambdaHashingVersion: "20201221"

resources:
  Resources:
    EventsTable: ${file(resources/EventsTable.yml):EventsTable}
    EventsBucket: ${file(resources/EventsBucket.yml):EventsBucket}
    EventsBucketPolicy: ${file(resources/EventsBucket.yml):EventsBucketPolicy}
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

functions:
  createEvent:
    handler: src/handlers/createEvent.handler
    events:
      - http:
          method: POST
          path: /events
          cors: true
          authorizer: ${self:custom.authorizer}

  getEvents:
    handler: src/handlers/getEvents.handler
    events:
      - http:
          method: GET
          path: /events
          cors: true
          authorizer: ${self:custom.authorizer}

  deleteEvent:
    handler: src/handlers/deleteEvent.handler
    events:
      - http:
          method: DELETE
          path: /events/{id}
          cors: true
          authorizer: ${self:custom.authorizer}

  getEventById:
    handler: src/handlers/getEventById.handler
    events:
      - http:
          method: GET
          path: /events/{id}
          cors: true
          authorizer: ${self:custom.authorizer}

  addSuscriber:
    handler: src/handlers/addSuscriber.handler
    events:
      - http:
          method: POST
          path: /events/{id}/suscribers
          cors: true
          authorizer: ${self:custom.authorizer}

  removeSuscriber:
    handler: src/handlers/removeSuscriber.handler
    events:
      - http:
          method: DELETE
          path: /events/{id}/suscribers
          cors: true
          authorizer: ${self:custom.authorizer}

  uploadEventPicture:
    handler: src/handlers/uploadEventPicture.handler
    events:
      - http:
          method: PATCH
          path: /events/{id}/picture
          cors: true
          authorizer: ${self:custom.authorizer}

  scheduleNextEvents:
    handler: src/handlers/scheduleNextEvents.handler
    
  notifyEvents:
    handler: src/handlers/notifyEvents.handler


custom:
  EventsTable:
    name: !Ref EventsTable
    arn: !GetAtt EventsTable.Arn
  MailQueue:
    arn: arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:MailQueue-dev
    url: https://sqs.#{AWS::Region}.amazonaws.com/#{AWS::AccountId}/MailQueue-dev
  EventsBucket:
    name: events-bucket-s5ds4f-${self:provider.stage}
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auth-service-dev-auth
  bundle:
    linting: false
